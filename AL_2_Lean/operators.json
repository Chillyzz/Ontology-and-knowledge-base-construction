{
    "Get_Number_Floor": "Get_Number_Floor({x: Real}) -> Integer # 向下取整",
    "Get_Number_Ceil": "Get_Number_Ceil({x: Real}) -> Integer # 向上取整",
    "Get_Number_Round": "Get_Number_Round({x: Real}) -> Integer # 最接近的整数",
    "Abs": "Abs({a: Real}) -> NonNegativeNumbers # 取a的绝对值",
    "Log": "Log({a: Real}, {b: Real}) -> Real # 取对数值 \\log_a b",
    "NaturalLog": "NaturalLog({a: Real}) -> Real # 取自然对数值 \\ln a",
    "Sqrt": "Sqrt({a: Real}) -> Real # 对a开根",
    "Factorial": "Factorial({n: NaturalNumbers}) -> NaturalNumbers # 取 n 的阶乘 n!",
    "Get_Combination": "Get_Combination({n: NaturalNumbers}, {k: NaturalNumbers}) -> Real: The coefficient of the term in the expansion of ( (x + y)^n ), as ( \binom{n}{k} ).",
    "Get_Reciprocal": "Get_Reciprocal({x: Real}) -> Real: A number that, when multiplied by the original number, results in 1.",
    "Get_Sum": "Get_Sum({S: Finset}, {L: LamdaExpression}) -> Real # 集合S可以为(Set.Icc 1 10).toFinset, lambda表达式可以为(λ x : ℕ => x ^ 2 + 1)",
    "Get_Prod": "Get_Prod({S: Finset}, {L: LamdaExpression}) -> ℝ # 集合S可以为(Set.Icc 1 10).toFinset, lambda表达式可以为(λ x : ℕ => x ^ 2 + 1)",
    "Exp": "Exp({x: Real}) -> Real # Exp(e ^ 2) = 2",
    "Solve_equation": "Solve_equation({x: Variable}, {P: Equation}) -> Set # 输入一个等式和对应变量, 返回解集(可扩展到多元, 但方程个数必须等于变量数)",
    "Solve_inequation": "Solve_inequation({x: Variable}, {P: Inequation}) -> Set # 输入一个不等式和对应变量, 返回解集 (可扩展到多元, 但方程个数必须等于变量数)",
    "Get_Value_Expression": "Get_Value_Expression({P: Expression}) -> Number # 输入一个表达式(不含未知变量), 求它的值(Query时使用的算子)",
    "Get_PolyDegree": "Get_PolyDegree(x: Polynomial) -> Number # 输入一个多项式, 返回它的最高次幂",
    "Get_Polyroots": "Get_Polyroots(x: Polynomial) -> Set # 输入一个多项式, 返回它的根的集合",
    "Get_Term_Coefficient": "Get_Term_Coefficient({x: Polynomial}, {y: PolynomialTerm}) -> Number # 输入一个多项式和对应的某一项, 返回该项的系数",
    "Get_PolyTerm": "Get_PolyTerm(x: Polynomial) -> Set # 输入一个多项式, 返回它的项的集合",
    "Get_ConstantTerm": "Get_ConstantTerm(x: Polynomial) -> Number # 输入一个多项式, 返回它的常数项",
    "IsPolyFactor": "IsPolyFactor({A: Polynomial}, {B: Polynomial}) -> Boolean # 输入两个多项式, 判断 A 是不是 B 的因子",
    "Is_IrreduciblePolynomial": "Is_IrreduciblePolynomial({A: Polynomial}) -> Boolean # 输入一个多项式, 判断是否可约",
    "Get_PolyCoefficient": "Get_PolyCoefficient(x: Polynomial) -> Set # 输入一个多项式, 返回它的系数集合",
    "Eval_Value_Polynomial": "Eval_Value_Expression({P: Polynomial(a)}, {x: Prop(a)}) -> Number # 输入一个多项式和变量在某处的值, 返回对应的值",
    "Is_Polynomial_Root": "Is_Polynomial_Root({P: Polynomial}, {x: Variable}) -> Boolean # 判断 x 是不是多项式 P 的根",
    "Get_Polynomial_Composition": "Get_Polynomial_Composition({f: Polynomial}, {g: Polynomial}) -> Polynomial",
    "Get_Polynomial_Leading_Coefficient": "Get_Polynomial_Leading_Coefficient(x: Polynomial) -> Number # 输入一个多项式, 返回最高项系数",
    "Get_Sequence_Terms": "Get_Sequence_Terms({s: Sequence}, {n: Integers}) -> ElementType # 获取数列的第 n 项",
    "Get_Sequences_Sum": "Get_Sequences_Sum({s: Sequence}, {i: Integer}) -> Number # 获取数列前 i 项的和",
    "Is_ArithmeticSequence": "Is_ArithmeticSequence({s: Sequence}) -> Boolean -- 判断数列是否为等差数列",
    "Is_GeometricSequence": "Is_GeometricSequence({s: Sequence}) -> Boolean -- 判断数列是否为等比数列",
    "Is_MonotonicSequence": "Is_MonotonicSequence({s: Sequence}) -> Boolean -- 判断数列是否为单调数列",
    "Get_CommonDifference": "Get_CommonDifference({s: ArithmeticSequence}) -> Number -- 获取等差数列的公差",
    "Get_CommonRatio": "Get_CommonRatio({s: GeometricSequence}) -> Number -- 获取等比数列的公比",
    "Is_Monotonic_Increasing_Sequence": "Is_Monotonic_Increasing_Sequence({s: Sequence}) -> Boolean -- 判断数列是否为单调递增数列",
    "Is_Monotonic_Decreasing_Sequence": "Is_Monotonic_Decreasing_Sequence({s: Sequence}) -> Boolean -- 判断数列是否为单调递减数列",
    "Get_FiniteSequences_Length": "Get_FiniteSequences_Length({s: Sequence}) -> PositiveInteger -- 获取有限数列的长度",
    "Get_Sequence_Infinite_Sum": "Get_Sequence_Infinite_Sum({s: Sequence}) -> Real -- 获取数列的无限求和",
    "Get_Function_Range": "Get_Function_Range(f: Function) -> Set # 输入函数f，返回该函数的取值范围",
    "Get_Function_Maximum": "Get_Function_Maximum(f: Function) -> Number # 输入函数f，返回该函数的最大取值",
    "Get_Function_Minimum": "Get_Function_Minimum(f: Function) -> Number # 输入函数f，返回该函数的最小取值",
    "Get_Function_Symmetry": "Get_Function_Symmetry(f: Function) -> String",
    "Get_Function_Zeroes": "Get_Function_Zeroes(f: Function) -> Set",
    "Get_Function_Composition": "Get_Function_Composition({f: Function}, {g: Function}) -> Function # 输入两个函数，返回复合函数，如f(g(x))",
    "Get_Function_Minimalperiod": "Get_Function_Minimalperiod(f: Function) -> Real",
    "Get_Inverse_Function": "Get_Inverse_Function(f: Function) -> Function # 输入函数f，返回该函数的反函数",
    "Get_Function_IthComposition": "Get_Function_IthComposition({f: Function}, {i: Integer}) -> Function # 输入函数f和整数i，返回该函数经过i次嵌套后的函数",
    "Get_Function_Value": "Get_Function_Value({f: Function}, {x: Number}) -> Number # 返回函数f在取x时的返回值",
    "Is_Bijection": "Is_Bijection(f: Function) -> Boolean",
    "Is_Injection": "Is_Injection(f: Function) -> Boolean",
    "Is_Surjection": "Is_Surjection(f: Function) -> Boolean",
    "Get_QuadraticFunction_Discriminant": "Get_QuadraticFunction_Discriminant(f: QuadraticFunction) -> Real # 求二次函数的判别式",
    "Get_Function_Expression": "Get_Function_Expression(f: Function) -> Expression # 获取函数f的表达式",
    "Get_StepFunction_Expression": "Get_StepFunction_Expression({f: Function}, {P: Proposition}) -> Expression # 返回阶段函数f在阶段取值P条件下的表达式",
    "Is_Function_Root": "Is_Function_Root({P: Function}, {x: Number}) -> Boolean # 判断 x 是不是函数 P 的根",
    "Get_Function_InDomain_Range": "Get_Function_InDomain_Range({f: Function}, {A: Set}) -> Set # 求函数在集合A下的像B",
    "Set_Union": "Set_Union({A: Set}, {B: Set}) -> Set # 求集合A和集合B的并集",
    "Set_Intersection": "Set_Intersection({A: Set}, {B: Set}) -> Set # 求集合A和集合B的交集",
    "Set_Difference": "Set_Difference({A: Set}, {B: Set}) -> Set # 求集合A和集合B的差集",
    "Set_SymmetricDifference": "Set_SymmetricDifference({A: Set}, {B: Set}) -> Set",
    "Set_Subset": "Set_Subset({A: Set}, {B: Set}) -> Boolean",
    "Set_ProperSubset": "Set_ProperSubset({A: Set}, {B: Set}) -> Boolean",
    "Set_Superset": "Set_Superset({A: Set}, {B: Set}) -> Boolean",
    "Set_ProperSuperset": "Set_ProperSuperset({A: Set}, {B: Set}) -> Boolean",
    "Set_Cardinality": "Set_Cardinality({A: Set}) -> Number # 返回集合 A 的基数",
    "Set_PowerSet": "Set_PowerSet({A: Set}) -> Set 返回集合 A 的超集",
    "Set_Complement": "Set_Complement({A: Set}, {U: Set}) -> Set",
    "Set_Equality": "Set_Equality({A: Set}, {B: Set}) -> Boolean # 判断集合 A 与集合 B 是否等价",
    "Get_Set_Sum": "Get_Set_Sum({A: Set}) -> Real # 输入集合A，返回该集合所有元素的和",
    "Get_Set_Product": "Get_Set_Product({A: Set}) -> Real # 输入集合A，返回该集合所有元素的积",
    "Build_Set": "Build_Set({x: VariableType}, {P(x): Proposition}) -> Set # 根据条件构造一个集合",
    "Get_Set_Maximum": "Get_Set_Maximum({A: Set}) -> Real # 输入集合A，返回该集合所有元素中最大的元素",
    "Get_Set_Minimum": "Get_Set_Minimum({A: Set}) -> Real # 输入集合A，返回该集合所有元素中最小的元素",
    "Elements_In_Set": "Elements_In_Set({A: Individual}, {B: Set}) -> Boolean # 判断A是否是集合B中的元素",
    "Get_Set_Means": "Get_Set_Means({A: Set}) -> Real # 输入集合A，返回该集合所有元素的均值",
    "Is_Set_BoundedFromAbove": "Is_Set_BoundedFromAbove({A: Set}) -> Boolean",
    "Is_Set_Unbounded": "Is_Set_Unbounded({A: Set}) -> Boolean",
    "Get_UniversalSet": "Get_UniversalSet({A: Concept}) -> Set # The set that contains all the elements under consideration for a particular context.",
    "Range": "Range({a: NaturalNumber}, {b: NaturalNumber}) -> FiniteSet # Range(a, b) = {a, a + 1, ... , b}",
    "Get_Open_Interval": "Get_Open_Interval(a: Number, b: Number) -> Interval # 开区间(a,b)",
    "Get_LeftClosedRightOpen_Interval": "Get_LeftClosedRightOpen_Interval(a: Number, b: Number) -> Interval # 左闭右开区间[a, b)",
    "Get_LeftOpenRightClosed_Interval": "Get_LeftOpenRightClosed_Interval(a: Number, b: Number) -> Interval # 左开右闭区间(a, b]",
    "Get_Closed_Interval": "Get_Closed_Interval(a: Number, b: Number) -> Interval # 闭区间[a, b]",
    "Get_RightOpen_Interval": "Get_RightOpen_Interval(b: Number) -> Interval # 区间(-∞, b)",
    "Get_RightClosed_Interval": "Get_RightClosed_Interval(b: Number) -> Interval # 区间(-∞, b]",
    "Get_LeftOpen_Interval": "Get_LeftOpen_Interval(a: Number) -> Interval # 区间(a, +∞)",
    "Get_LeftClosed_Interval": "Get_LeftClosed_Interval(a: Number) -> Interval # 区间[a, +∞)",
    "Negation": "Negation({a: Proposition}) -> Proposition # 对原命题进行取反",
    "Build_Universal_Proposition": "Build_Universal_Proposition({a: Set}, {b: Proposition}) -> Proposition # \\forall x\\in 集合 a, x都满足命题b",
    "Build_Exist_Proposition": "Build_Exist_Proposition({a: Set}, {b: Proposition}) -> Proposition # \\exist x\\in 集合 a, x满足命题b",
    "And": "And({a: Proposition}, {b: Proposition}) -> Proposition # 命题A 且 命题 B",
    "Or": "Or({a: Proposition}, {b: Proposition}) -> Proposition # 命题A 或 命题 B",
    "Implication": "Implication({p: Proposition}, {q: Proposition}) -> Proposition # 命题 P 蕴含 命题 Q",
    "Equivalence": "Equivalence({p: Proposition}, {q: Proposition}) -> Proposition # 命题 P 和命题 Q 等价",
    "Build_UniqueExist_Proposition": "Build_UniqueExist_Proposition({a: Set}, {b: Proposition}) -> Proposition # 存在唯一 x\\in 集合a, x满足命题b",
    "Get_Angle_DegreeMeasure": "Get_Angle_DegreeMeasure({A: Angle}) -> DegreeMeasure # 输入一个角A, 返回它的度数(角度制)",
    "Get_Angle_RadianMeasure": "Get_Angle_RadianMeasure({A: Angle}) -> RadianMeasure # 输入一个角A, 返回它的弧度(弧度制)",
    "Change_Degree_To_Radian": "Change_Degree_To_Radian({D: DegreeMeasure}) -> RadianMeasure # 输入一个度数(角度制), 返回它的弧度(弧度制)",
    "Change_Radian_To_Degree": "Change_Radian_To_Degree({R: RadianMeasure}) -> DegreeMeasure # 输入一个弧度(弧度制), 返回它的角度(角度制)",
    "Sin": "Sin({A: Angle}) -> Real # 输入一个角度, 返回对应的正弦值",
    "Cos": "Cos({A: Angle}) -> Real # 输入一个角度, 返回对应的余弦值",
    "Tan": "Tan({A: Angle}) -> Real # 输入一个角度, 返回对应的正切值",
    "Cot": "Cot({A: Angle}) -> Real # 输入一个角度, 返回对应的余切值",
    "Is_Odd_Number": "Is_Odd_Number(a: Integer) -> Boolean # 判断 a 是不是奇数",
    "Is_Even_Number": "Is_Even_Number(a: Integer) -> Boolean # 判断 a 是不是偶数",
    "Is_Prime_Number": "Is_Prime_Number(a: Integer) -> Boolean # 判断 a 是不是素数",
    "Is_Composite": "Is_Composite(x: Integer) -> Boolean # 判断 x 是否为合数",
    "Get_FractionalPart": "Get_FractionalPart(x: Real) -> Real",
    "Get_IntegerPart": "Get_IntegerPart(x: Real) -> Integers",
    "Get_LeastCommonDenominator": "Get_LeastCommonDenominator(f1: RationalNumbers, f2: RationalNumbers) -> Integers",
    "Get_Mediant": "Get_Mediant(q1: RationalNumbers, q2: RationalNumbers) -> RationalNumbers",
    "UnitFraction": "UnitFraction(q: RationalNumbers) -> Prop",
    "Is_ProperFraction": "Is_ProperFraction(q: RationalNumbers) -> Prop",
    "Is_IrreducibleFraction": "Is_IrreducibleFraction(q: RationalNumbers) -> Prop",
    "Is_Coprime": "Is_Coprime({m: NaturalNumber}, {n: NaturalNumber}) -> Prop",
    "Is_Factor": "Is_Factor({a: NaturalNumber}, {b: NaturalNumber}) -> Prop",
    "Get_GCD": "Get_GCD({a: NaturalNumber}, {b: NaturalNumber}) -> NaturalNumber # 求 a 与 b 的最大公约数",
    "Get_LCM": "Get_LCM({a: NaturalNumber}, {b: NaturalNumber}) -> NaturalNumber # 求 a 与 b 的最小公倍数",
    "Is_PerfectSquare": "Is_PerfectSquare(a: NaturalNumber) -> Prop",
    "Get_Remainder": "Get_Remainder({a: NaturalNumber}, {b: NaturalNumber}) -> NaturalNumber # 求 a % b 的结果",
    "Is_Prime": "Is_Prime(a: NaturalNumber) -> Prop",
    "Get_SumOfSquares": "Get_SumOfSquares(n: Integers) -> Integers",
    "Is_Twin_Prime": "Is_Twin_Prime(p: Prime) -> Boolean",
    "Is_Factorial_Prime": "Is_Factorial_Prime(p: Prime) -> Boolean",
    "Is_MersenneNumber": "Is_MersenneNumber(N: NaturalNumber) -> Boolean",
    "Is_SinglyEvenNumber": "Is_SinglyEvenNumber(N: NaturalNumber) -> Boolean",
    "Order": "Order(a: NaturalNumber, N: NaturalNumber) -> Number",
    "Get_Mod_Nat": "Get_Mod_Nat(n: NaturalNumber, m: NaturalNumber) -> NaturalNumber # 求 n \\pmod{m}",
    "Is_Nat_Mod": "Is_Nat_Mod(a: NaturalNumber, b: NaturalNumber, m: NaturalNumber) -> Boolean # a \\equiv b \\pmod{m}"    
}